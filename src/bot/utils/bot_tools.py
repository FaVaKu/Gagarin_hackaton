from aiogram import Dispatcher
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from asyncpg import Pool
from typing import List

from src.bot.data.config import ADMINS_IDS, DEVELOPER_ID, LOGIN_DB
from src.bot.data.loader import bot, logger, create_db_pool


async def on_startup(dp: Dispatcher):
    """ –§—É–Ω–∫—Ü–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

    Args:
        dp (Dispatcher): Bot dispatcher
    """
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await set_bot_commands()
    
    dp.conn: Pool = await create_db_pool()
    
    await set_db(dp)
    
    await send_message_to_admins(text='‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    

async def on_shutdown(dp: Dispatcher):
    """ –§—É–Ω–∫—Ü–∏—è, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞

    Args:
        dp (Dispatcher): Bot dispatcher
    """
    logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    
    await send_message_to_admins(text='‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        

async def get_admins_ids() -> List[int]:
    """ –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤

    Returns:
        List[int]: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
    """
    return [DEVELOPER_ID] + ADMINS_IDS


async def send_message_to_admins(*, text: str = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', **kwargs):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º

    Args:
        text (str, optional): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. Defaults to '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'.
    """
    assert text, '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª'
    
    for ADMIN_ID in await get_admins_ids():
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=text,
                **kwargs
            )
        except:
            continue

async def set_bot_commands():
    """ –°—Ç–∞–≤–∏—Ç —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —é–∑–µ—Ä–æ–≤
    user_commands = [
        BotCommand("start", "üì£ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("about_bot", "üßë‚Äçüíª –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"),
    ]

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_commands = [
        BotCommand("start", "üì£ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("admin", "üõ°Ô∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é"),
        BotCommand("about_bot", "üßë‚Äçüíª –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"),
    ]
    
    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())

    for admin_id in await get_admins_ids():
        try:
            await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
        except:
            continue



async def set_db(dp):
    request = f"""
CREATE TABLE IF NOT EXISTS users
(
    tg_id bigint NOT NULL,
    first_name character varying,
    last_name character varying,
    username character varying,
    access_key character varying,
    is_bot_blocked boolean NOT NULL DEFAULT false,
    date_of_join timestamp with time zone,
    CONSTRAINT users_pkey PRIMARY KEY (tg_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS users
    OWNER to {LOGIN_DB};    
"""

    
    await dp.conn.execute(request)